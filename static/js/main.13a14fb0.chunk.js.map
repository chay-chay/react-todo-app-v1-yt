{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodo","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13a14fb0.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\n    // set for checing if edit value or not. If edit value, show the value when click edit.\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      {props.edit ? (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Update your item\"\n            value={input}\n            name=\"text\"\n            className=\"todo-input\"\n            onChange={handleChange}\n            ref={inputRef}\n          />\n          <button className=\"todo-button\"> Update </button>\n        </>\n      ) : (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Add a todo\"\n            value={input}\n            name=\"text\"\n            className=\"todo-input\"\n            onChange={handleChange}\n            ref={inputRef}\n          />\n          <button className=\"todo-button\"> Add Todo</button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport { RiCloseCircleLine } from \"react-icons/ri\";\nimport { TiEdit } from \"react-icons/ti\";\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\",\n  });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n    \n    if (edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n    \n  return todos.map((todo, index) => (\n    <div\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\n      key={index}\n    >\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n        {todo.text}\n      </div>\n      <div className=\"icons\">\n              <RiCloseCircleLine onClick={ () => removeTodo(todo.id)} className='delete-todo' />\n        <TiEdit onClick={ () => setEdit({ id: todo.id, value: todo.text })} className='edit-todo'  />\n      </div>\n    </div>\n  ));\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport Todo from \"./Todo\";\nimport TodoForm from \"./TodoForm\";\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n    \n    const addTodo = todo => {\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n        const newTodo = [todo, ...todos]\n        setTodos(newTodo)\n        console.log(...todos)\n    }\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^s*$/.test(newValue.text)) {\n            return;\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n    }\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n        setTodos(removeArr)\n    }\n\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n          if (todo.id === id) {\n            todo.isComplete = !todo.isComplete;\n          }\n          return todo;\n        });\n        setTodos(updatedTodos);\n    };\n    \n   \n  return (\n    <div>\n      <h1>What's the plan for today?</h1>\n          <TodoForm onSubmit={addTodo} />\n          <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\n    </div>\n  );\n}\n\nexport default TodoList;\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}